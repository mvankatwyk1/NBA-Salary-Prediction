{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question: How accurately can different machine learning models predict an NBA Player's salary? With the top model, what are the top five features that contribute most to this prediction?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import important modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.preprocessing import StandardScaler, PolynomialFeatures\n",
    "from sklearn.pipeline import make_pipeline, Pipeline\n",
    "from sklearn.linear_model import Lasso, LinearRegression, Ridge\n",
    "from sklearn.model_selection import KFold, GridSearchCV\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from pandas_profiling import ProfileReport\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.metrics import accuracy_score\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read in the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "urlsalary = 'https://hoopshype.com/salaries/players/2019-2020/'\n",
    "salary = pd.read_html(urlsalary)\n",
    "\n",
    "urlplayer = 'https://www.basketball-reference.com/leagues/NBA_2020_per_game.html'\n",
    "players = pd.read_html(urlplayer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clean up data for players and salary datasets, combine the datasets into one by merging on players names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "386"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#player dataset\n",
    "#change the list (as read in) into a dataframe\n",
    "players2 = players[0]\n",
    "players2.head()\n",
    "#removes the extra lines that were read in from the website (not part of data)\n",
    "players2 = players2.loc[players2.Rk != 'Rk']\n",
    "len(players2)\n",
    "\n",
    "#there are some duplicate players that have switched teams. I decided to drop them because they could be outliers\n",
    "#Find duplicate names and filter them through and drop any rows with duplicates\n",
    "result = players2.groupby('Player').count()\n",
    "dupes = result.index[result['Rk']>1].tolist()\n",
    "players_filtered = players2[~players2.Player.isin(dupes)]\n",
    "\n",
    "#salary dataset\n",
    "#change the list (as read in) into a dataframe\n",
    "salary2 = salary[0]\n",
    "\n",
    "#drop the columns that are not needed (only keep player and salary column)\n",
    "salary2 = salary2[['Player', '2019/20']]\n",
    "salary2.head()\n",
    "#len(salary2)\n",
    "\n",
    "#combine the datasets\n",
    "combined = pd.merge(salary2,players_filtered, on = 'Player')\n",
    "combined.head()\n",
    "len(combined)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Do pandas profiling - profides and EDA to evaluate the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "57a9f9b3a77b4caf9df597481a9165d2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='Summarize dataset', max=45.0, style=ProgressStyle(descrip…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "85639dd476214cd0ad0197d0194285c5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='Generate report structure', max=1.0, style=ProgressStyle(…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4f7b77c27f384a81a4b38dd7c1deefae",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='Render HTML', max=1.0, style=ProgressStyle(description_wi…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6e56fcc107754fe88e4def54eeef6cbb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='Export report to file', max=1.0, style=ProgressStyle(desc…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#pandas profiling -- look at EDA\n",
    "string = r'C:\\Users\\mlewi\\Documents\\Practice_git\\Stat426\\report.html'\n",
    "\n",
    "profile = ProfileReport(combined)\n",
    "profile.to_file(output_file=string)\n",
    "\n",
    "#Generates a report about all features, missing data, duplicates, feature type, number of observations, graphs, etc. \n",
    "#Duplicates were fixed above\n",
    "#Missing data is filled in below\n",
    "#Number of observations = 386\n",
    "#Feature type after changes are 28 numerical and 3 categorical features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2019/20</th>\n",
       "      <th>Pos</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tm</th>\n",
       "      <th>G</th>\n",
       "      <th>GS</th>\n",
       "      <th>MP</th>\n",
       "      <th>FG</th>\n",
       "      <th>FGA</th>\n",
       "      <th>FG%</th>\n",
       "      <th>...</th>\n",
       "      <th>FT%</th>\n",
       "      <th>ORB</th>\n",
       "      <th>DRB</th>\n",
       "      <th>TRB</th>\n",
       "      <th>AST</th>\n",
       "      <th>STL</th>\n",
       "      <th>BLK</th>\n",
       "      <th>TOV</th>\n",
       "      <th>PF</th>\n",
       "      <th>PTS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40231758.0</td>\n",
       "      <td>PG</td>\n",
       "      <td>31.0</td>\n",
       "      <td>GSW</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>6.6</td>\n",
       "      <td>16.4</td>\n",
       "      <td>0.402</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.8</td>\n",
       "      <td>4.4</td>\n",
       "      <td>5.2</td>\n",
       "      <td>6.6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>3.2</td>\n",
       "      <td>2.2</td>\n",
       "      <td>20.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38506482.0</td>\n",
       "      <td>PG</td>\n",
       "      <td>31.0</td>\n",
       "      <td>HOU</td>\n",
       "      <td>57.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>35.9</td>\n",
       "      <td>10.6</td>\n",
       "      <td>22.5</td>\n",
       "      <td>0.472</td>\n",
       "      <td>...</td>\n",
       "      <td>0.763</td>\n",
       "      <td>1.8</td>\n",
       "      <td>6.2</td>\n",
       "      <td>7.9</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.4</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>27.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38506482.0</td>\n",
       "      <td>PG</td>\n",
       "      <td>34.0</td>\n",
       "      <td>OKC</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>31.5</td>\n",
       "      <td>6.2</td>\n",
       "      <td>12.7</td>\n",
       "      <td>0.489</td>\n",
       "      <td>...</td>\n",
       "      <td>0.907</td>\n",
       "      <td>0.4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.7</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2.3</td>\n",
       "      <td>17.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38199000.0</td>\n",
       "      <td>SG</td>\n",
       "      <td>30.0</td>\n",
       "      <td>HOU</td>\n",
       "      <td>68.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>36.5</td>\n",
       "      <td>9.9</td>\n",
       "      <td>22.3</td>\n",
       "      <td>0.444</td>\n",
       "      <td>...</td>\n",
       "      <td>0.865</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>6.6</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.9</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3.3</td>\n",
       "      <td>34.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37436858.0</td>\n",
       "      <td>PG</td>\n",
       "      <td>35.0</td>\n",
       "      <td>LAL</td>\n",
       "      <td>67.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>34.6</td>\n",
       "      <td>9.6</td>\n",
       "      <td>19.4</td>\n",
       "      <td>0.493</td>\n",
       "      <td>...</td>\n",
       "      <td>0.693</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>7.8</td>\n",
       "      <td>10.2</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.5</td>\n",
       "      <td>3.9</td>\n",
       "      <td>1.8</td>\n",
       "      <td>25.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      2019/20 Pos   Age   Tm     G    GS    MP    FG   FGA    FG%  ...    FT%  \\\n",
       "0  40231758.0  PG  31.0  GSW   5.0   5.0  27.8   6.6  16.4  0.402  ...  1.000   \n",
       "1  38506482.0  PG  31.0  HOU  57.0  57.0  35.9  10.6  22.5  0.472  ...  0.763   \n",
       "2  38506482.0  PG  34.0  OKC  70.0  70.0  31.5   6.2  12.7  0.489  ...  0.907   \n",
       "3  38199000.0  SG  30.0  HOU  68.0  68.0  36.5   9.9  22.3  0.444  ...  0.865   \n",
       "4  37436858.0  PG  35.0  LAL  67.0  67.0  34.6   9.6  19.4  0.493  ...  0.693   \n",
       "\n",
       "   ORB  DRB  TRB   AST  STL  BLK  TOV   PF   PTS  \n",
       "0  0.8  4.4  5.2   6.6  1.0  0.4  3.2  2.2  20.8  \n",
       "1  1.8  6.2  7.9   7.0  1.6  0.4  4.5  3.5  27.2  \n",
       "2  0.4  4.6  5.0   6.7  1.6  0.2  2.3  2.3  17.6  \n",
       "3  1.0  5.5  6.6   7.5  1.8  0.9  4.5  3.3  34.3  \n",
       "4  1.0  6.9  7.8  10.2  1.2  0.5  3.9  1.8  25.3  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cleaning the data\n",
    "#All of the columns were strings, I changed all the \"should be\" numerical columns to numerical floats\n",
    "#Take out the $ and , from the salary column so that it can become numerical \n",
    "combined['2019/20'] = combined['2019/20'].apply(lambda x: x.replace(\"$\", ''))\n",
    "combined['2019/20'] = combined['2019/20'].apply(lambda x: x.replace(\",\", ''))\n",
    "\n",
    "#gather all columns that will become numerical (leave out player, team, and position)\n",
    "col_to_float = ['2019/20', 'Rk', 'Age', 'G', 'GS', 'MP', 'FG',\n",
    "       'FGA', 'FG%', '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'eFG%', 'FT',\n",
    "       'FTA', 'FT%', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF',\n",
    "       'PTS']\n",
    "for column in col_to_float:\n",
    "    combined[column] = combined[column].astype(float)\n",
    "\n",
    "#EDA shows that there are missing values for some features\n",
    "#Fill in missing values with zeroes because they are percentages so they didn't show up in the original data\n",
    "na_columns = ['FG%', '3P%', '2P%', 'eFG%', 'FT%']\n",
    "for column in na_columns: \n",
    "    combined[column] = combined[column].fillna(0)\n",
    "    \n",
    "#Delete Rk (ranking) column -- only based on how the origial webpage is sorted\n",
    "del combined['Rk']\n",
    "\n",
    "#Find index for Jimmy Butler - used for later to test model \n",
    "#JimmyButler = combined.loc[combined.Player == 'Jimmy Butler']\n",
    "#del JimmyButler['Player']\n",
    "\n",
    "#combined.index()\n",
    "\n",
    "#Delete Player column (won't help in model)\n",
    "del combined['Player']\n",
    "combined.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Encode for Position (\"Pos) and Team (\"Tm\") because they are categorical variables "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2019/20</th>\n",
       "      <th>Age</th>\n",
       "      <th>G</th>\n",
       "      <th>GS</th>\n",
       "      <th>MP</th>\n",
       "      <th>FG</th>\n",
       "      <th>FGA</th>\n",
       "      <th>FG%</th>\n",
       "      <th>3P</th>\n",
       "      <th>3PA</th>\n",
       "      <th>...</th>\n",
       "      <th>Tm_OKC</th>\n",
       "      <th>Tm_ORL</th>\n",
       "      <th>Tm_PHI</th>\n",
       "      <th>Tm_PHO</th>\n",
       "      <th>Tm_POR</th>\n",
       "      <th>Tm_SAC</th>\n",
       "      <th>Tm_SAS</th>\n",
       "      <th>Tm_TOR</th>\n",
       "      <th>Tm_UTA</th>\n",
       "      <th>Tm_WAS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40231758.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>6.6</td>\n",
       "      <td>16.4</td>\n",
       "      <td>0.402</td>\n",
       "      <td>2.4</td>\n",
       "      <td>9.8</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38506482.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>35.9</td>\n",
       "      <td>10.6</td>\n",
       "      <td>22.5</td>\n",
       "      <td>0.472</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.7</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38506482.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>31.5</td>\n",
       "      <td>6.2</td>\n",
       "      <td>12.7</td>\n",
       "      <td>0.489</td>\n",
       "      <td>1.6</td>\n",
       "      <td>4.3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38199000.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>36.5</td>\n",
       "      <td>9.9</td>\n",
       "      <td>22.3</td>\n",
       "      <td>0.444</td>\n",
       "      <td>4.4</td>\n",
       "      <td>12.4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37436858.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>34.6</td>\n",
       "      <td>9.6</td>\n",
       "      <td>19.4</td>\n",
       "      <td>0.493</td>\n",
       "      <td>2.2</td>\n",
       "      <td>6.3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 62 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      2019/20   Age     G    GS    MP    FG   FGA    FG%   3P   3PA  ...  \\\n",
       "0  40231758.0  31.0   5.0   5.0  27.8   6.6  16.4  0.402  2.4   9.8  ...   \n",
       "1  38506482.0  31.0  57.0  57.0  35.9  10.6  22.5  0.472  1.0   3.7  ...   \n",
       "2  38506482.0  34.0  70.0  70.0  31.5   6.2  12.7  0.489  1.6   4.3  ...   \n",
       "3  38199000.0  30.0  68.0  68.0  36.5   9.9  22.3  0.444  4.4  12.4  ...   \n",
       "4  37436858.0  35.0  67.0  67.0  34.6   9.6  19.4  0.493  2.2   6.3  ...   \n",
       "\n",
       "   Tm_OKC  Tm_ORL  Tm_PHI  Tm_PHO  Tm_POR  Tm_SAC  Tm_SAS  Tm_TOR  Tm_UTA  \\\n",
       "0       0       0       0       0       0       0       0       0       0   \n",
       "1       0       0       0       0       0       0       0       0       0   \n",
       "2       1       0       0       0       0       0       0       0       0   \n",
       "3       0       0       0       0       0       0       0       0       0   \n",
       "4       0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   Tm_WAS  \n",
       "0       0  \n",
       "1       0  \n",
       "2       0  \n",
       "3       0  \n",
       "4       0  \n",
       "\n",
       "[5 rows x 62 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined=pd.get_dummies(combined)\n",
    "combined.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyze the data with multiple machine learning approaches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ModelAnalyzer(X,y):\n",
    "    # INPUTS:\n",
    "    #   - X: (DataFrame) Explanatory variables to be used as features for model\n",
    "    #   - y: (Vector) Response variables to be used as target for model\n",
    "    # OUTPUTS:\n",
    "    #   - out: (str) Multiline report of the accuracy and fit time of each model\n",
    "\n",
    "    import time\n",
    "    from sklearn.metrics import mean_absolute_error, accuracy_score\n",
    "    from sklearn.model_selection import train_test_split\n",
    "    import warnings\n",
    "    warnings.filterwarnings('ignore')\n",
    "\n",
    "    # Split dataset into train and test dataset \n",
    "    train_X, test_X, train_Y, test_Y = train_test_split(X, y, train_size=0.75, shuffle=False, random_state=1)\n",
    "\n",
    "    # Model Selection\n",
    "    # Decision Tree\n",
    "    from sklearn.tree import DecisionTreeRegressor\n",
    "    start_dt = time.time()\n",
    "    dt = DecisionTreeRegressor(random_state=1, max_features = 'auto', max_leaf_nodes = 18, min_samples_leaf = 18)\n",
    "    dt.fit(train_X, train_Y)\n",
    "    dt_test_predictions = dt.predict(test_X)\n",
    "    dt_mae = mean_absolute_error(dt_test_predictions, test_Y)\n",
    "    finish_dt = str(round(time.time() - start_dt, 5))\n",
    "    out_dt = \"Decision Tree MAE: \" + str(dt_mae) + ', Time: ' + str(finish_dt) + ' seconds.'\n",
    "\n",
    "    # Random Forest\n",
    "    from sklearn.ensemble import RandomForestRegressor\n",
    "    start_rf = time.time()\n",
    "    rf = RandomForestRegressor(random_state = 1, min_samples_leaf = 6)\n",
    "    rf.fit(train_X, train_Y)\n",
    "    rf_test_predictions = rf.predict(test_X)\n",
    "    rf_mae = mean_absolute_error(rf_test_predictions, test_Y)\n",
    "    finish_rf = str(round(time.time() - start_rf, 5))\n",
    "    out_rf = \"Random Forest MAE: \" + str(rf_mae) + ', Time: ' + str(finish_rf) + ' seconds.'\n",
    "\n",
    "    # Support Vector Regressor\n",
    "    from sklearn.svm import SVR\n",
    "    start_svr = time.time()\n",
    "    svr = SVR()\n",
    "    svr.fit(train_X, train_Y)\n",
    "    svr_test_predictions = svr.predict(test_X)\n",
    "    svr_mae = mean_absolute_error(svr_test_predictions, test_Y)\n",
    "    finish_svr = str(round(time.time() - start_svr, 5))\n",
    "    out_svr = \"Support Vector MAE: \" + str(svr_mae) + ', Time: ' + str(finish_svr) + ' seconds.'\n",
    "\n",
    "    # Extra Trees\n",
    "    from sklearn.ensemble import ExtraTreesRegressor\n",
    "    start_etr = time.time()\n",
    "    etr = ExtraTreesRegressor(n_estimators = 250, min_samples_leaf = 4)\n",
    "    etr.fit(train_X, train_Y)\n",
    "    etr_test_predictions = etr.predict(test_X)\n",
    "    etr_mae = mean_absolute_error(etr_test_predictions, test_Y)\n",
    "    finish_etr = str(round(time.time() - start_etr, 5))\n",
    "    out_etr = \"Extra Trees MAE: \" + str(etr_mae) + ', Time: ' + str(finish_etr) + ' seconds.'\n",
    "\n",
    "    #LassoCV\n",
    "    from sklearn.linear_model import LassoCV\n",
    "    start_lasso = time.time()\n",
    "    lasso = LassoCV()\n",
    "    lasso.fit(train_X, train_Y)\n",
    "    lasso_test_predictions = lasso.predict(test_X)\n",
    "    lasso_mae = mean_absolute_error(lasso_test_predictions, test_Y)\n",
    "    finish_lasso = str(round(time.time() - start_lasso, 5))\n",
    "    out_lasso = \"Lasso MAE: \" + str(lasso_mae) + ', Time: ' + str(finish_lasso) + ' seconds.'\n",
    "\n",
    "    #RidgeCV\n",
    "    from sklearn.linear_model import RidgeCV\n",
    "    start_ridge = time.time()\n",
    "    ridge = RidgeCV()\n",
    "    ridge.fit(train_X, train_Y)\n",
    "    ridge_test_predictions = ridge.predict(test_X)\n",
    "    ridge_mae = mean_absolute_error(ridge_test_predictions, test_Y)\n",
    "    finish_ridge = str(round(time.time() - start_ridge, 5))\n",
    "    out_ridge = \"Ridge MAE: \" + str(ridge_mae) + ', Time: ' + str(finish_ridge) + ' seconds.'\n",
    "\n",
    "    #ElasticNetCV\n",
    "    from sklearn.linear_model import ElasticNetCV\n",
    "    start_en = time.time()\n",
    "    en = ElasticNetCV()\n",
    "    en.fit(train_X, train_Y)\n",
    "    en_test_predictions = en.predict(test_X)\n",
    "    en_mae = mean_absolute_error(en_test_predictions, test_Y)\n",
    "    finish_en = str(round(time.time() - start_en, 5))\n",
    "    out_en = \"Elastic Net MAE: \" + str(en_mae) + ', Time: ' + str(finish_en) + ' seconds.'\n",
    "\n",
    "    out = out_dt + '\\n' + out_rf + '\\n' + out_svr + '\\n' + out_etr + '\\n' + out_lasso + '\\n' + out_ridge + '\\n' + out_en\n",
    "    \n",
    "    return print(out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree MAE: 2215576.220852481, Time: 0.01099 seconds.\n",
      "Random Forest MAE: 2473037.237119938, Time: 0.29883 seconds.\n",
      "Support Vector MAE: 4307640.207550468, Time: 0.01499 seconds.\n",
      "Extra Trees MAE: 2729285.3127479134, Time: 0.49972 seconds.\n",
      "Lasso MAE: 3082459.186026419, Time: 0.11293 seconds.\n",
      "Ridge MAE: 3232003.2847754937, Time: 0.01 seconds.\n",
      "Elastic Net MAE: 8548606.9446445, Time: 0.09495 seconds.\n"
     ]
    }
   ],
   "source": [
    "X = combined.drop(columns = ['2019/20'])\n",
    "y = combined['2019/20']\n",
    "ModelAnalyzer(X,y)\n",
    "\n",
    "#the best model found is the Decision Tree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run a Grid search to find the best parameters for each model (change above code if different \"best\" inputs are found)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   5 out of   5 | elapsed:    5.7s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#for extratrees\n",
    "parameters = {\n",
    "   # \"n_estimators\": [225,250,275],\n",
    "   # \"min_samples_leaf\": [3,4,5]\n",
    "}\n",
    "\n",
    "train_X, test_X, train_Y, test_Y = train_test_split(X, y, train_size=0.75, shuffle=False, random_state=1)\n",
    "\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "etr = ExtraTreesRegressor(n_estimators = 250, min_samples_leaf = 4, random_state = 1)\n",
    "etr.fit(train_X, train_Y)\n",
    "etr_test_predictions = etr.predict(test_X)\n",
    "etr_mae = mean_absolute_error(etr_test_predictions, test_Y)\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "gsc = GridSearchCV(\n",
    "    estimator=etr,\n",
    "    param_grid = parameters,\n",
    "    scoring='r2',\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    "    verbose =1\n",
    ")\n",
    "gsc.fit(train_X, train_Y)\n",
    "gsc.best_params_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   5 out of   5 | elapsed:    0.0s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#for decisiontrees\n",
    "parameters = {\n",
    "   # \"min_samples_leaf\": range(1,21),\n",
    "    #\"max_features\": ['auto', 'sqrt', 'log2'],\n",
    "   # \"min_weight_fraction_leaf\": [0,0.25,1,5],\n",
    "   # \"max_leaf_nodes\": range(1,21),\n",
    "   # \"min_samples_split\": range(1,20)\n",
    "}\n",
    "\n",
    "train_X, test_X, train_Y, test_Y = train_test_split(X, y, train_size=0.75, shuffle=False, random_state=1)\n",
    "\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "dt = DecisionTreeRegressor(random_state=1, max_features = 'auto', max_leaf_nodes = 18, min_samples_leaf = 18)\n",
    "dt.fit(train_X, train_Y)\n",
    "dt_test_predictions = dt.predict(test_X)\n",
    "dt_mae = mean_absolute_error(dt_test_predictions, test_Y)\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "gsc = GridSearchCV(\n",
    "    estimator=dt,\n",
    "    param_grid = parameters,\n",
    "    scoring='r2',\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    "    verbose =1\n",
    ")\n",
    "gsc.fit(train_X, train_Y)\n",
    "gsc.best_params_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   5 out of   5 | elapsed:    0.6s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#for random forest\n",
    "parameters = {\n",
    " #   \"n_estimators\": [50,100,150],\n",
    " #   \"max_depth\": [None, 1, 2],\n",
    " #   \"min_samples_split\": [2,3,4],\n",
    " #   \"min_samples_leaf\": [5,6,7]\n",
    "}\n",
    "\n",
    "train_X, test_X, train_Y, test_Y = train_test_split(X, y, train_size=0.75, shuffle=False, random_state=1)\n",
    "\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rf = RandomForestRegressor(random_state = 1, min_samples_leaf = 5)\n",
    "rf.fit(train_X, train_Y)\n",
    "rf_test_predictions = rf.predict(test_X)\n",
    "rf_mae = mean_absolute_error(rf_test_predictions, test_Y)\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "gsc = GridSearchCV(\n",
    "    estimator=rf,\n",
    "    param_grid = parameters,\n",
    "    scoring='r2',\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    "    verbose =1\n",
    ")\n",
    "gsc.fit(train_X, train_Y)\n",
    "gsc.best_params_\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get Feature Importance for Decision Tree (best model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature ranking:\n",
      "Feature: 0, Score: 0.32307\n",
      "Feature: 1, Score: 0.00000\n",
      "Feature: 2, Score: 0.00534\n",
      "Feature: 3, Score: 0.00000\n",
      "Feature: 4, Score: 0.03483\n",
      "Feature: 5, Score: 0.00000\n",
      "Feature: 6, Score: 0.00000\n",
      "Feature: 7, Score: 0.00000\n",
      "Feature: 8, Score: 0.00000\n",
      "Feature: 9, Score: 0.00000\n",
      "Feature: 10, Score: 0.00095\n",
      "Feature: 11, Score: 0.00000\n",
      "Feature: 12, Score: 0.00000\n",
      "Feature: 13, Score: 0.00000\n",
      "Feature: 14, Score: 0.09262\n",
      "Feature: 15, Score: 0.00000\n",
      "Feature: 16, Score: 0.00558\n",
      "Feature: 17, Score: 0.00000\n",
      "Feature: 18, Score: 0.00000\n",
      "Feature: 19, Score: 0.04777\n",
      "Feature: 20, Score: 0.00502\n",
      "Feature: 21, Score: 0.00000\n",
      "Feature: 22, Score: 0.00013\n",
      "Feature: 23, Score: 0.00000\n",
      "Feature: 24, Score: 0.00024\n",
      "Feature: 25, Score: 0.48445\n",
      "Feature: 26, Score: 0.00000\n",
      "Feature: 27, Score: 0.00000\n",
      "Feature: 28, Score: 0.00000\n",
      "Feature: 29, Score: 0.00000\n",
      "Feature: 30, Score: 0.00000\n",
      "Feature: 31, Score: 0.00000\n",
      "Feature: 32, Score: 0.00000\n",
      "Feature: 33, Score: 0.00000\n",
      "Feature: 34, Score: 0.00000\n",
      "Feature: 35, Score: 0.00000\n",
      "Feature: 36, Score: 0.00000\n",
      "Feature: 37, Score: 0.00000\n",
      "Feature: 38, Score: 0.00000\n",
      "Feature: 39, Score: 0.00000\n",
      "Feature: 40, Score: 0.00000\n",
      "Feature: 41, Score: 0.00000\n",
      "Feature: 42, Score: 0.00000\n",
      "Feature: 43, Score: 0.00000\n",
      "Feature: 44, Score: 0.00000\n",
      "Feature: 45, Score: 0.00000\n",
      "Feature: 46, Score: 0.00000\n",
      "Feature: 47, Score: 0.00000\n",
      "Feature: 48, Score: 0.00000\n",
      "Feature: 49, Score: 0.00000\n",
      "Feature: 50, Score: 0.00000\n",
      "Feature: 51, Score: 0.00000\n",
      "Feature: 52, Score: 0.00000\n",
      "Feature: 53, Score: 0.00000\n",
      "Feature: 54, Score: 0.00000\n",
      "Feature: 55, Score: 0.00000\n",
      "Feature: 56, Score: 0.00000\n",
      "Feature: 57, Score: 0.00000\n",
      "Feature: 58, Score: 0.00000\n",
      "Feature: 59, Score: 0.00000\n",
      "Feature: 60, Score: 0.00000\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = dt\n",
    "importances = model.feature_importances_\n",
    "# Print the feature ranking\n",
    "print(\"Feature ranking:\")\n",
    "for i,v in enumerate(importances):\n",
    "    print('Feature: %0d, Score: %.5f' % (i,v))\n",
    "\n",
    "# Plot the impurity-based feature importances of the decision tree\n",
    "plt.figure()\n",
    "plt.title(\"Feature importances\")\n",
    "plt.bar(range(X.shape[1]), importances,\n",
    "        color=\"r\", align=\"center\")\n",
    "plt.xticks(range(X.shape[1]))\n",
    "plt.xlim([-1, X.shape[1]])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find top five features from feature importance and plot them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature ranking:\n",
      "Feature: PTS, Score = 0.4844462249775129\n",
      "Feature: Age, Score = 0.32306857979714465\n",
      "Feature: FT, Score = 0.09261822024605476\n",
      "Feature: TRB, Score = 0.047768612879812385\n",
      "Feature: FG, Score = 0.03483452962880963\n"
     ]
    }
   ],
   "source": [
    "sorted_index = np.argsort(importances)[::-1]\n",
    "top_5 = sorted_index[0:5]\n",
    "train_X.columns[top_5]\n",
    "print(\"Feature ranking:\")\n",
    "\n",
    "for index in top_5:\n",
    "    out = 'Feature: ' + str(train_X.columns[index]) + ', Score = ' + str(importances[index])\n",
    "    print(out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.title(\"Feature importances\")\n",
    "plt.bar(train_X.columns[top_5], importances[top_5],\n",
    "        color=\"r\", align=\"center\")\n",
    "plt.show()\n",
    "\n",
    "#the top five features are Points, Age, Free Throws Attempted, Minutes Played, and 2 Point Field Goals Attempted"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer: With a Decision Tree model, on average we can accurately predict an NBA player's salary within $2,215,576. The five most important features that contribute to this prediction are points scored by player, player's age, free throws attempted, minutes played, and two point field goals attempted."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
